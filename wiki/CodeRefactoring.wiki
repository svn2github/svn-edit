#summary Overview of the ongoing code refactoring effort in SVG-edit

= Introduction =

SVG-edit started out as a much tinier project contained in just two JS files:  svg-editor.js (essentially the editor UI) and svgcanvas.js (everything else).  Over time, as SVG-edit has gained more and more features, these files naturally grew in size.  And while extensions were introduced as one mechanism to separate features from the main code base, by Oct 2010, svgcanvas.js had reached 11,600 lines of JavaScript.

My main concern with this was that one giant JS file, no matter how well-commented and organized, cannot attract new developers.  It's just too daunting to try and find out how the project works when it's one giant file.  In a project that relies on casual contributors finding spare time, this is a huge problem.  I experienced this first hand, since I had stopped heavily contributing to the project earlier in 2010 and then tried to come back near the end of 2010 and found myself lost.

The other problem is that the only realistic way of testing any new change was to invoke the editor and try out the feature.  While this is a really good way to ensure your new feature works, it doesn't catch if you've broken other existing features.  Over time, codebases that only rely on manual testing are bound to make less and less progress.

= Details =

I'll note that a call to split out JS functionality into separate files was made by Narendra back in 2009 (when he had gone away from the project and tried to come back).  He had even contributed new code in the form of a separate script to deal with localization, which was great.  But at the time I didn't really know how I wanted to deal with modularization in a web app.  I didn't want to be making separate GET requests for every script tag, and even his attempt with locale.js bothered me just a little.  Plus, development was hot and heavy on new features ;)

But now that I was in Narendra's shoes and the amount of code had gone up by an order of magnitude, I realized how important it was.  With this in mind, I set out to try and break apart the code a little bit.  Starting with r1817, I managed to split out some bits of code into a separate JS file.  My goal in the refactoring was to make incremental changes that carefully started to split apart the code but didn't introduce any new bugs.  I haven't been entirely successful in this, but there haven't been any major disasters, at least.

I eventually worked things out such that code that had been refactored lived somewhere under the 'svgedit' global namespace.  For instance, browser.js introduces the following:

svgedit.browser.isOpera()
svgedit.browser.isWebkit()
svgedit.browser.isGecko()
svgedit.browser.supportsSelectors()
svgedit.browser.supportsPathReplaceItem()
etc
